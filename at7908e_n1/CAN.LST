C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 1   


C51 COMPILER V6.14, COMPILATION OF MODULE CAN
OBJECT MODULE PLACED IN .\CAN.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\CAN.C LARGE REGFILE(.\can.ORC) DEBUG OBJECTEXTEND LISTINCLUDE SYMBOLS

stmt level    source

   1          #include "AT89C51XD2.h"
   1      =1  /*H***************************************************************************
   2      =1  * NAME: AT89C51XD2.h           
   3      =1  *----------------------------------------------------------------------------
   4      =1  * PURPOSE: SFR Description file for AT89C51xD2 products 
   5      =1  * 				ON KEIL compiler
   6      =1  *****************************************************************************/
   7      =1  
   8      =1  #define Sfr(x, y)	  	sfr x = y
   9      =1  #define Sbit(x, y, z)   sbit x = y^z
  10      =1  #define Sfr16(x,y)	    sfr16 x = y
  11      =1  
  12      =1  /*----------------------------------------*/
  13      =1  /* Include file for 8051 SFR Definitions  */
  14      =1  /*----------------------------------------*/
  15      =1  
  16      =1  /*  BYTE Register  */
  17      =1  Sfr (P0 , 0x80);        
  18      =1  
  19      =1  Sbit (P0_7 , 0x80, 7);
  20      =1  Sbit (P0_6 , 0x80, 6);
  21      =1  Sbit (P0_5 , 0x80, 5);
  22      =1  Sbit (P0_4 , 0x80, 4);
  23      =1  Sbit (P0_3 , 0x80, 3);
  24      =1  Sbit (P0_2 , 0x80, 2);
  25      =1  Sbit (P0_1 , 0x80, 1);
  26      =1  Sbit (P0_0 , 0x80, 0);
  27      =1  
  28      =1  Sfr (P1 , 0x90);        
  29      =1  
  30      =1  Sbit (P1_7 , 0x90, 7);
  31      =1  Sbit (P1_6 , 0x90, 6);
  32      =1  Sbit (P1_5 , 0x90, 5);
  33      =1  Sbit (P1_4 , 0x90, 4);
  34      =1  Sbit (P1_3 , 0x90, 3);
  35      =1  Sbit (P1_2 , 0x90, 2);
  36      =1  Sbit (P1_1 , 0x90, 1);
  37      =1  Sbit (P1_0 , 0x90, 0);
  38      =1  
  39      =1  
  40      =1  
  41      =1  Sfr (P2 , 0xA0); 
  42      =1  Sbit (P2_7 , 0xA0, 7);
  43      =1  Sbit (P2_6 , 0xA0, 6);
  44      =1  Sbit (P2_5 , 0xA0, 5);
  45      =1  Sbit (P2_4 , 0xA0, 4);
  46      =1  Sbit (P2_3 , 0xA0, 3);
  47      =1  Sbit (P2_2 , 0xA0, 2);
  48      =1  Sbit (P2_1 , 0xA0, 1);
  49      =1  Sbit (P2_0 , 0xA0, 0);
  50      =1  
  51      =1         
  52      =1  Sfr (P3 , 0xB0);        
  53      =1  
  54      =1  Sbit (P3_7 , 0xB0, 7);
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 2   

  55      =1  Sbit (P3_6 , 0xB0, 6);
  56      =1  Sbit (P3_5 , 0xB0, 5);
  57      =1  Sbit (P3_4 , 0xB0, 4);
  58      =1  Sbit (P3_3 , 0xB0, 3);
  59      =1  Sbit (P3_2 , 0xB0, 2);
  60      =1  Sbit (P3_1 , 0xB0, 1);
  61      =1  Sbit (P3_0 , 0xB0, 0);
  62      =1  
  63      =1  Sbit (RD , 0xB0, 7);
  64      =1  Sbit (WR , 0xB0, 6);
  65      =1  Sbit (T1 , 0xB0, 5);
  66      =1  Sbit (T0 , 0xB0, 4);
  67      =1  Sbit (INT1 , 0xB0, 3);
  68      =1  Sbit (INT0 , 0xB0, 2);
  69      =1  Sbit (TXD , 0xB0, 1);
  70      =1  Sbit (RXD , 0xB0, 0);
  71      =1  
  72      =1  Sfr (P4 , 0xC0);        
  73      =1  Sbit (P4_7 , 0xC0, 7);
  74      =1  Sbit (P4_6 , 0xC0, 6);
  75      =1  Sbit (P4_5 , 0xC0, 5);
  76      =1  Sbit (P4_4 , 0xC0, 4);
  77      =1  Sbit (P4_3 , 0xC0, 3);
  78      =1  Sbit (P4_2 , 0xC0, 2);
  79      =1  Sbit (P4_1 , 0xC0, 1);
  80      =1  Sbit (P4_0 , 0xC0, 0);
  81      =1  
  82      =1  Sfr (P5 , 0xE8);        
  83      =1  Sbit (P5_7 , 0xE8, 7);
  84      =1  Sbit (P5_6 , 0xE8, 6);
  85      =1  Sbit (P5_5 , 0xE8, 5);
  86      =1  Sbit (P5_4 , 0xE8, 4);
  87      =1  Sbit (P5_3 , 0xE8, 3);
  88      =1  Sbit (P5_2 , 0xE8, 2);
  89      =1  Sbit (P5_1 , 0xE8, 1);
  90      =1  Sbit (P5_0 , 0xE8, 0);
  91      =1  
  92      =1      
  93      =1  Sfr (PSW , 0xD0);       
  94      =1  
  95      =1  Sbit (CY  , 0xD0  , 7);
  96      =1  Sbit (AC  , 0xD0  , 6);
  97      =1  Sbit (F0  , 0xD0  , 5);
  98      =1  Sbit (RS1 , 0xD0  , 4);
  99      =1  Sbit (RS0 , 0xD0  , 3);
 100      =1  Sbit (OV  , 0xD0  , 2);
 101      =1  Sbit (UD  , 0xD0  , 1);
 102      =1  Sbit (P   , 0xD0  , 0);
 103      =1  
 104      =1  Sfr (ACC , 0xE0);       
 105      =1  Sfr (B , 0xF0); 
 106      =1  Sfr (SP , 0x81);        
 107      =1  Sfr (DPL , 0x82);       
 108      =1  Sfr (DPH , 0x83);       
 109      =1  
 110      =1  Sfr (PCON , 0x87);      
 111      =1  Sfr (CKCON0 , 0x8F);     
 112      =1  Sfr (CKCON1 , 0xAF);
 113      =1  
 114      =1  /*------------------ TIMERS registers ---------------------*/
 115      =1  Sfr (TCON , 0x88);
 116      =1  Sbit (TF1 , 0x88, 7);
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 3   

 117      =1  Sbit (TR1 , 0x88, 6);
 118      =1  Sbit (TF0 , 0x88, 5);
 119      =1  Sbit (TR0 , 0x88, 4);
 120      =1  Sbit (IE1 , 0x88, 3);
 121      =1  Sbit (IT1 , 0x88, 2);
 122      =1  Sbit (IE0 , 0x88, 1);
 123      =1  Sbit (IT0 , 0x88, 0);
 124      =1          
 125      =1  Sfr (TMOD , 0x89);      
 126      =1  
 127      =1  Sfr  (T2CON , 0xC8);
 128      =1  Sbit (TF2   , 0xC8, 7);
 129      =1  Sbit (EXF2  , 0xC8, 6);
 130      =1  Sbit (RCLK  , 0xC8, 5);
 131      =1  Sbit (TCLK  , 0xC8, 4);
 132      =1  Sbit (EXEN2 , 0xC8, 3);
 133      =1  Sbit (TR2   , 0xC8, 2);
 134      =1  Sbit (C_T2  , 0xC8, 1);
 135      =1  Sbit (CP_RL2, 0xC8, 0);
 136      =1          
 137      =1  Sfr (T2MOD , 0xC9);     
 138      =1  Sfr (TL0 , 0x8A);       
 139      =1  Sfr (TL1 , 0x8B);       
 140      =1  Sfr (TL2 , 0xCC);       
 141      =1  Sfr (TH0 , 0x8C);       
 142      =1  Sfr (TH1 , 0x8D);       
 143      =1  Sfr (TH2 , 0xCD);       
 144      =1  Sfr (RCAP2L , 0xCA);    
 145      =1  Sfr (RCAP2H , 0xCB);    
 146      =1  Sfr (WDTRST , 0xA6);    
 147      =1  Sfr (WDTPRG , 0xA7);    
 148      =1  
 149      =1  
 150      =1  /*------------------- UART registers ------------------------*/
 151      =1  Sfr (SCON , 0x98);      
 152      =1  Sbit (SM0  , 0x98, 7);
 153      =1  Sbit (FE   , 0x98, 7);
 154      =1  Sbit (SM1  , 0x98, 6);
 155      =1  Sbit (SM2  , 0x98, 5);
 156      =1  Sbit (REN  , 0x98, 4);
 157      =1  Sbit (TB8  , 0x98, 3);
 158      =1  Sbit (RB8  , 0x98, 2);
 159      =1  Sbit (TI   , 0x98, 1);
 160      =1  Sbit (RI   , 0x98, 0);
 161      =1  
 162      =1  Sfr (SBUF , 0x99);      
 163      =1  Sfr (SADEN , 0xB9);     
 164      =1  Sfr (SADDR , 0xA9);     
 165      =1  
 166      =1  /*-------------------- Internal Baud Rate Generator --------*/
 167      =1  Sfr (BRL  	, 0x9A);      
 168      =1  Sfr (BDRCON , 0x9B);      
 169      =1  
 170      =1  
 171      =1  
 172      =1  /*-------------------- IT registers -----------------------*/
 173      =1     
 174      =1  Sfr (IEN1  , 0xB1);      
 175      =1  Sfr (IPH0 , 0xB7);      
 176      =1  Sfr (IPH1 , 0xB3);      
 177      =1  Sfr (IPL0 , 0xB8);      
 178      =1  Sfr (IPL1 , 0xB2);      
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 4   

 179      =1  
 180      =1  
 181      =1  
 182      =1  /*  IEN0  */
 183      =1  Sfr (IE    , 0xA8);   
 184      =1  Sbit (EA   , 0xA8, 7);
 185      =1  Sbit (EC   , 0xA8, 6);
 186      =1  Sbit (ET2  , 0xA8, 5);
 187      =1  Sbit (ES   , 0xA8, 4);
 188      =1  Sbit (ET1  , 0xA8, 3);
 189      =1  Sbit (EX1  , 0xA8, 2);
 190      =1  Sbit (ET0  , 0xA8, 1);
 191      =1  Sbit (EX0  , 0xA8, 0);
 192      =1  
 193      =1  
 194      =1  /*--------------------- PCA registers -----------------------------*/
 195      =1  Sfr (CCON , 0xD8);      
 196      =1  Sfr (CMOD , 0xD9);      
 197      =1  Sfr (CH , 0xF9);        
 198      =1  Sfr (CL , 0xE9);        
 199      =1  Sfr (CCAP0H  , 0xFA);   
 200      =1  Sfr (CCAP0L  , 0xEA);   
 201      =1  Sfr (CCAPM0  , 0xDA);   
 202      =1  Sfr (CCAP1H  , 0xFB);   
 203      =1  Sfr (CCAP1L  , 0xEB);   
 204      =1  Sfr (CCAPM1  , 0xDB);   
 205      =1  Sfr (CCAP2H  , 0xFC);   
 206      =1  Sfr (CCAP2L  , 0xEC);   
 207      =1  Sfr (CCAPM2  , 0xDC);   
 208      =1  Sfr (CCAP3H  , 0xFD);   
 209      =1  Sfr (CCAP3L  , 0xED);   
 210      =1  Sfr (CCAPM3  , 0xDD);   
 211      =1  Sfr (CCAP4H  , 0xFE);   
 212      =1  Sfr (CCAP4L  , 0xEE);   
 213      =1  Sfr (CCAPM4  , 0xDE);   
 214      =1  /* CCON */
 215      =1  Sbit (CF   , 0xD8, 7);
 216      =1  Sbit (CR   , 0xD8, 6);
 217      =1  
 218      =1  Sbit (CCF4   , 0xD8, 4);
 219      =1  Sbit (CCF3  , 0xD8, 3);
 220      =1  Sbit (CCF2  , 0xD8, 2);
 221      =1  Sbit (CCF1  , 0xD8, 1);
 222      =1  Sbit (CCF0  , 0xD8, 0);
 223      =1  
 224      =1  
 225      =1  /*------------------ T W I registers ------------------------------*/
 226      =1  Sfr ( SSCON , 0x93);
 227      =1  Sfr ( SSCS , 0x94);
 228      =1  Sfr ( SSDAT , 0x95);
 229      =1  Sfr ( SSADR , 0x96);
 230      =1  Sfr ( PI2	, 0xF8);	
 231      =1  Sbit (PI2_1  , 0xF8, 1);
 232      =1  Sbit (PI2_0  , 0xF8, 0);
 233      =1  
 234      =1  /*-------------------- OSC control registers ----------------------*/
 235      =1  Sfr ( CKSEL , 0x85 );
 236      =1  Sfr ( OSCCON , 0x86 );
 237      =1  Sfr ( CKRL , 0x97 );
 238      =1  
 239      =1  /*-------------------- Keyboard control registers -----------------*/
 240      =1  Sfr ( KBLS , 0x9C );
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 5   

 241      =1  Sfr ( KBE , 0x9D );
 242      =1  Sfr ( KBF , 0x9E );
 243      =1  /*-------------------- SPI ---------------------- -----------------*/
 244      =1  Sfr ( SPCON, 0xC3 );
 245      =1  Sfr ( SPSTA, 0xC4 );
 246      =1  Sfr ( SPDAT, 0xC5 );
 247      =1  
 248      =1  /*------ Misc ----------------------------------------------------*/
 249      =1  Sfr	( AUXR , 0x8E);
 250      =1  Sfr ( AUXR1, 0xA2);
 251      =1  Sfr ( FCON, 0xD1);
 252      =1  
 253      =1  
 254      =1  /*------ E data --------------------------------------------------*/
 255      =1  
 256      =1  Sfr ( EECON,  0xD2 );
   2          #include "canreg.h"
   1      =1  #define NODE_ID 0x01
   2      =1  
   3      =1  // error
   4      =1  #define BUSOFF 0xFF
   5      =1  #define ERROR 0xF0
   6      =1  
   7      =1  extern unsigned char canreg[77];
   8      =1  
   9      =1  /****************************/
  10      =1  /* CAN Register Declaration */
  11      =1  /* CAN Control Registers    */   
  12      =1  
  13      =1  #define		SETUP_0			canreg[0]
  14      =1  #define		SETUP_1			canreg[1]
  15      =1  #define		SETUP_2			canreg[2]
  16      =1  #define		SETUP_3			canreg[3]
  17      =1  #define		SETUP_RX		canreg[4]
  18      =1  
  19      =1  #define		STATUS			canreg[5]
  20      =1  #define		STATUS_RX		canreg[6]
  21      =1  
  22      =1  #define		FILTER_AM_0		canreg[7]
  23      =1  #define		FILTER_AM_1		canreg[8]
  24      =1  
  25      =1  #define		ERR_COUNT_TX	canreg[9]
  26      =1  #define		ERR_COUNT_RX	canreg[10]
  27      =1  
  28      =1  #define		TRIG_MATCH_0	canreg[11]
  29      =1  #define		TRIG_MATCH_1	canreg[12]
  30      =1  
  31      =1  #define		TX_ARB_0		canreg[16]
  32      =1  #define		TX_ARB_1		canreg[17]
  33      =1  #define		TX_ARB_2		canreg[18]
  34      =1  #define		TX_ARB_3		canreg[19]
  35      =1  #define		TX_MESSAGE_0	canreg[20]
  36      =1  #define		TX_MESSAGE_1	canreg[21]
  37      =1  #define		TX_MESSAGE_2	canreg[22]
  38      =1  #define		TX_MESSAGE_3	canreg[23]
  39      =1  #define		TX_MESSAGE_4	canreg[24]
  40      =1  #define		TX_MESSAGE_5	canreg[25]
  41      =1  #define		TX_MESSAGE_6	canreg[26]
  42      =1  #define		TX_MESSAGE_7	canreg[27]
  43      =1  
  44      =1  #define		RX1_ARB_0		canreg[32]
  45      =1  #define		RX1_ARB_1		canreg[33]
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 6   

  46      =1  #define		RX1_ARB_2		canreg[34]
  47      =1  #define		RX1_ARB_3		canreg[35]
  48      =1  #define		RX1_MESSAGE_0	canreg[36]
  49      =1  #define		RX1_MESSAGE_1	canreg[37]
  50      =1  #define		RX1_MESSAGE_2	canreg[38]
  51      =1  #define		RX1_MESSAGE_3	canreg[39]
  52      =1  #define		RX1_MESSAGE_4	canreg[40]
  53      =1  #define		RX1_MESSAGE_5	canreg[41]
  54      =1  #define		RX1_MESSAGE_6	canreg[42]
  55      =1  #define		RX1_MESSAGE_7	canreg[43]
  56      =1  #define		RX1_STATUS		canreg[44]
  57      =1  
  58      =1  #define		RX2_ARB_0		canreg[48]
  59      =1  #define		RX2_ARB_1		canreg[49]
  60      =1  #define		RX2_ARB_2		canreg[50]
  61      =1  #define		RX2_ARB_3		canreg[51]
  62      =1  #define		RX2_MESSAGE_0	canreg[52]
  63      =1  #define		RX2_MESSAGE_1	canreg[53]
  64      =1  #define		RX2_MESSAGE_2	canreg[54]
  65      =1  #define		RX2_MESSAGE_3	canreg[55]
  66      =1  #define		RX2_MESSAGE_4	canreg[56]
  67      =1  #define		RX2_MESSAGE_5	canreg[57]
  68      =1  #define		RX2_MESSAGE_6	canreg[58]
  69      =1  #define		RX2_MESSAGE_7	canreg[59]
  70      =1  #define		RX2_STATUS		canreg[60]
  71      =1  
  72      =1  #define		RX3_ARB_0		canreg[64]
  73      =1  #define		RX3_ARB_1		canreg[65]
  74      =1  #define		RX3_ARB_2		canreg[66]
  75      =1  #define		RX3_ARB_3		canreg[67]
  76      =1  #define		RX3_MESSAGE_0	canreg[68]
  77      =1  #define		RX3_MESSAGE_1	canreg[69]
  78      =1  #define		RX3_MESSAGE_2	canreg[70]
  79      =1  #define		RX3_MESSAGE_3	canreg[71]
  80      =1  #define		RX3_MESSAGE_4	canreg[72]
  81      =1  #define		RX3_MESSAGE_5	canreg[73]
  82      =1  #define		RX3_MESSAGE_6	canreg[74]
  83      =1  #define		RX3_MESSAGE_7	canreg[75]
  84      =1  #define		RX3_STATUS		canreg[76]
  85      =1  
   3          #include "can.h"
   1      =1  // message identifier
   2      =1  #define MSG_ID_DATA_ALL 0x1000
   3      =1  #define MSG_ID_DATA_NODE1 0x1020
   4      =1  #define MSG_ID_DATA_NODE2 0x1040
   5      =1  #define MSG_ID_DATA_NODE3 0X1060
   6      =1  
   7      =1  void Init_CAN();
   8      =1  void def_RX();
   9      =1  void canmsg_transmit();
  10      =1  void Transmit_CAN_MSG(unsigned char *msg, int len);
  11      =1  int Get_Receive_Message(unsigned char *RecvData, int index);
  12      =1  
   4          
   5          unsigned char canreg[77] _at_ 0x8000;
   6          
   7          unsigned char error_count = 0;
   8          unsigned char retry = 0;
   9          
  10          void Init_CAN()
  11          {
  12   1      
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 7   

  13   1      	SETUP_1 = 0x80;	// Disabled=1
  14   1      
  15   1      	SETUP_3 = 0xE2;	// RxClr=1, Reset=1, IntClr=1, RSJ2=0, RSJ1=1, RSJ0=0
  16   1      
  17   1      	// baud rate = 1 MHz -> fail
  18   1      /*	SETUP_0 = 0x83;	// BTR0 = 1, BTR1 = 1, Txint = 1, Rxint = 1, Errint = 0, Overint = 0
  19   1      	SETUP_2 = 0x42;	// time segment 2 = 4 pluse, time segment 1 = 11 pluse
  20   1      
  21   1      	// baud rate = 500 kHz -> fail
  22   1      	SETUP_0 = 0xC3;	// BTR0 = 1, BTR1 = 1, Txint = 1, Rxint = 1, Errint = 0, Overint = 0
  23   1      	SETUP_2 = 0x11;	// time segment 2 = 4 pluse, time segment 1 = 11 pluse
  24   1      
  25   1      	// baud rate = 250 kHz -> success
  26   1      	SETUP_0 = 0xC3;	// BTR0 = 1, BTR1 = 1, Txint = 1, Rxint = 1, Errint = 0, Overint = 0
  27   1      	SETUP_2 = 0x24;	// time segment 2 = 4 pluse, time segment 1 = 11 pluse
  28   1      */
  29   1      	// baud rate = 125 kHz -> success
  30   1      	SETUP_0 = 0xC3;	// BTR0 = 1, BTR1 = 1, Txint = 1, Rxint = 1, Errint = 0, Overint = 0
  31   1      	SETUP_2 = 0x4A;	// time segment 2 = 4 pluse, time segment 1 = 11 pluse
  32   1      
  33   1      	FILTER_AM_0 = 0x8F;	// mask
  34   1      	FILTER_AM_1 = 0xE0;
  35   1      
  36   1      	def_RX();
  37   1      
  38   1      	SETUP_3 = 0x02;	// RxClr=0, Reset=0, IntClr=0
  39   1      
  40   1      	SETUP_1 = 0;	// Disabled=0
  41   1      }
  42          
  43          void def_RX(){
  44   1      	SETUP_1 |= 0x80;	// Disabled = 1
  45   1      
  46   1      	RX1_ARB_0 = 0x00;
  47   1      	RX1_ARB_1 = 0x20;
  48   1      
  49   1      	RX2_ARB_0 = 0x00;
  50   1      	RX2_ARB_1 = 0x20;
  51   1      
  52   1      	RX3_ARB_0 = 0x80;
  53   1      	RX3_ARB_1 = 0x20;
  54   1      
  55   1      	SETUP_1 &= 0x7F;	// Disabled = 0
  56   1      }
  57          
  58          void canmsg_transmit(){
  59   1      	SETUP_3 = 0x2A;	// Txreq = 1 (send), IntClr = 1
  60   1      }
  61          
  62          void Transmit_CAN_MSG(unsigned char *msg, int len){
  63   1      	int i, index = 16, data_len;
  64   1      	unsigned short msg_id;
  65   1      
  66   1      	data_len = len - 2;
  67   1      
  68   1      	switch(msg[1]){
  69   2      	case 0x01 : 
  70   2      		msg_id = MSG_ID_DATA_NODE1;
  71   2      		break;
  72   2      	case 0x02 : 
  73   2      		msg_id = MSG_ID_DATA_NODE2;
  74   2      		break;
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 8   

  75   2      	case 0x03 : 
  76   2      		msg_id = MSG_ID_DATA_NODE3;
  77   2      		break;
  78   2      	default :
  79   2      		msg_id = MSG_ID_DATA_ALL;
  80   2      		break;
  81   2      	}
  82   1      	
  83   1      	// identifier
  84   1      	TX_ARB_0 = (unsigned char)(msg_id >> 8);
  85   1      	TX_ARB_1 = (unsigned char)msg_id;
  86   1      
  87   1      	for(i=0; i<len && i<8; i++){
  88   2      		canreg[20+ i] = msg[i+2];
  89   2      	}
  90   1      
  91   1      	SETUP_1 &= 0x80;	// data frame, standard, data lenth part clear	
  92   1      	SETUP_1 |= (unsigned char)data_len;		// data length
  93   1      
  94   1      	canmsg_transmit();		//CAN message send
  95   1      }
  96          
  97          int Get_Receive_Message(unsigned char *RecvData, int index){
  98   1      	int i, len = 0;
  99   1      
 100   1      	canreg[index + 12] &= 0x0F;
 101   1      	len = canreg[index + 12];
 102   1      
 103   1      	for(i=0; i<len && i<8; i++){
 104   2      		RecvData[i] = canreg[index + 4 + i];
 105   2      	}
 106   1      
 107   1      	switch(index){
 108   2      	case 32 : SETUP_RX = 0x01;
 109   2      		break;
 110   2      	case 48 : SETUP_RX = 0x02;
 111   2      		break;
 112   2      	case 64 : SETUP_RX = 0x04;
 113   2      		break;
 114   2      	}
 115   1      
 116   1      	return len;
 117   1      }
 118          
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 9   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CCF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
CCF3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
CCF4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
EC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
CF . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
FE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
P0_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
P1_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
P0_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
P2_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
P1_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P0_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
P3_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
P2_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
P1_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P0_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
P4_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
P3_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
P2_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
P1_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
P0_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
CR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
P5_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
P4_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
P3_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
P2_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
P1_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
P0_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
EXF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
P5_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
P4_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
P3_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
P2_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
P1_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P0_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
P5_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
P4_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
P3_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
P2_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
P1_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
P0_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
P5_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
P4_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
P3_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
P2_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
P1_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
UD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
P5_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
P4_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
P3_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
P2_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 10  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P5_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
P4_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
P3_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
P5_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
P4_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
P5_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
C_T2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
RCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
TCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
_Transmit_CAN_MSG. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  msg. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  len. . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0003H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0005H  2
  data_len . . . . . . . . . . . . . .  AUTO     XDATA  INT      0007H  2
  msg_id . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0009H  2
retry. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0000H  1
error_count. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0001H  1
def_RX . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
CP_RL2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
Init_CAN . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
_Get_Receive_Message . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  RecvData . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  index. . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0003H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  len. . . . . . . . . . . . . . . . .  AUTO     XDATA  INT      0005H  2
canmsg_transmit. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
C51 COMPILER V6.14  CAN                                                                    11/26/2005 20:58:56 PAGE 11  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PI2_0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
PI2_1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
EXEN2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
canreg . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    8000H  77
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
CCF0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
CCF1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    507    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
